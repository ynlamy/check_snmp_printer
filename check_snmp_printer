#!/bin/bash

# check_snmp_printer
# Description : Check the status of a printer
# Version : 1.0
# Author : Yoann LAMY
# Licence : GPLv2

# Commands
CMD_BASENAME="/usr/bin/basename"
CMD_SNMPGET="/usr/bin/snmpget"
CMD_SNMPWALK="/usr/bin/snmpwalk"
CMD_GREP="/bin/grep"

# Script name
SCRIPTNAME=`$CMD_BASENAME $0`

# Version
VERSION="1.0"

# Plugin return codes
STATE_OK=0
STATE_WARNING=1
STATE_CRITICAL=2
STATE_UNKNOWN=3

# Default OID (Printer-MIB)
OID_NAMES=(   ".1.3.6.1.2.1.43.11.1.1.6.1" ".1.3.6.1.2.1.43.12.1.1.4.1")
OID_TOTALS=(  ".1.3.6.1.2.1.43.11.1.1.8.1" ".1.3.6.1.2.1.43.10.2.1.9.1")
OID_STATUSES=(".1.3.6.1.2.1.43.11.1.1.9.1" ".1.3.6.1.2.1.43.10.2.1.10.1")

OID_PAGE=".1.3.6.1.2.1.43.10.2.1.4.1.1"

# Default variables
DESCRIPTION="Unknown"
STATE=$STATE_UNKNOWN

# Default options
COMMUNITY="public"
HOSTNAME="127.0.0.1"
TYPE="page"
CONSUMABLE="black"
WARNING=0
CRITICAL=0
VERBOSE="false"

# Option processing
print_usage() {
  echo "Usage: ${SCRIPTNAME} [options] | -h | -V"
  echo ""
  echo "Options:"
  echo -e "\t-H ADDRESS"
  echo -e "\t   Name or IP address of host (default: 127.0.0.1)"
  echo -e "\t-C STRING"
  echo -e "\t   Community name for the host's SNMP agent (default: public)"
  echo -e "\t-t STRING"
  echo -e "\t   Check type (consumable, page) (default: page)"
  echo -e "\t-o STRING"
  echo -e "\t   Consummable (black, cyan, magenta, yellow, drum) (default: black)"
  echo -e "\t-w INTEGER"
  echo -e "\t   Warning level for the checked resource (default: 0)"
  echo -e "\t-c INTEGER"
  echo -e "\t   Critical level for the checked resource (default: 0)"
  echo -e "\t-v"
  echo -e "\t   Enable verbose mode, printing raw output from SNMP"
  echo -e "\t-d"
  echo -e "\t   Enable debugging output"
  echo -e "\t-h"
  echo -e "\t   Print this help screen"
  echo -e "\t-V"
  echo -e "\t   Print version and license information"
  echo ""
  echo "The warning and critical levels are intepreted differently, depending on the type of resource."
  echo "For pages, the values are absolute (i.e. raise alerts at a particular number of printed pages)."
  echo "For consumables, the value is interpreted as percent used. "
}

print_version() {
  echo $SCRIPTNAME version $VERSION
  echo ""
  echo "The nagios plugins come with ABSOLUTELY NO WARRANTY."
  echo "You may redistribute copies of the plugins under the terms of the GNU General Public License v2."
}

print_help() {
  print_version
  echo ""
  print_usage
  echo ""
  echo "This plugin uses the 'snmpget' command and 'snmpwalk' command included with the NET-SNMP package."
  echo "This plugin support performance data output."
  echo "If the percentage of the warning level and the critical level are 0, then the script returns a state OK."
  echo ""
  echo ""
  echo "Example: ./check_snmp_printer -H 127.0.0.1 -C public -t consumable -o black -w 85 -c 90"
}

function parse_parameters() {
  while getopts H:C:t:o:w:c:vhV OPT
  do
    case $OPT in
      H) HOSTNAME="$OPTARG" ;;
      C) COMMUNITY="$OPTARG" ;;
      t) TYPE="$OPTARG" ;;
      o) CONSUMABLE="$OPTARG" ;;
      w) WARNING=$OPTARG ;;
      c) CRITICAL=$OPTARG ;;
      v) VERBOSE="true" ;;
      h)
        print_help
        exit $STATE_UNKNOWN
        ;;
      V)
        print_version
        exit $STATE_UNKNOWN
        ;;
     esac
  done
}

# sets the STATE variable depending on the warning and critial levels for the 
# input level (parameter 1)
set_status() {
  local LEVEL="$1"

  if [ $LEVEL -gt $CRITICAL ] && [ $CRITICAL != 0 ]; then
    if [ "$VERBOSE" = true ]; then
      echo "Reporting as critical since ${LEVEL} is greater than ${CRITICAL}"
    fi
    STATE=$STATE_CRITICAL
  elif [ $LEVEL -gt $WARNING ] && [ $WARNING != 0 ]; then
    if [ "$VERBOSE" = true ]; then
      echo "Reporting as warning since ${LEVEL} is greater than ${WARNING}"
    fi
    STATE=$STATE_WARNING
  else
    STATE=$STATE_OK
  fi
}


# Check the consumable of the printer (Usage : ./check_snmp_printer -H 127.0.0.1 -C public -t consumable -o black -w 85 -c 90)
# NOTE: This function will update the global DESCRIPTION and STATE variables!
check_consumable() {

  local CONSUMABLE_NAME=$CONSUMABLE

  if [ $CONSUMABLE = "black" ]; then
    CONSUMABLE_NAME="black\|cartouche\|toner"
  fi

  # look through the OIDs for consumables to find the one we need...
  local CONSUMABLE_ID=""
  for OID_NAME in ${OID_NAMES}; do
    # skip if we already found a match (CONSUMABLE_ID is not empty)
    if [ -z "$CONSUMABLE_ID" ]; then
      # output from snmpwalk will be a list of lines like:
      #    .1.3.6.1.2.1.43.11.1.1.6.1.1 = STRING: "Black Cartridge HP CF410A"
      #    .1.3.6.1.2.1.43.11.1.1.6.1.2 = STRING: "Cyan Cartridge HP CF411A"
      #    .1.3.6.1.2.1.43.11.1.1.6.1.3 = STRING: "Magenta Cartridge HP CF413A"
      #    .1.3.6.1.2.1.43.11.1.1.6.1.4 = STRING: "Yellow Cartridge HP CF412A"
      # this command will first grep the consumable (e.g. "magenta"):
      #    .1.3.6.1.2.1.43.11.1.1.6.1.3 = STRING: "Magenta Cartridge HP CF413A"
      # it will then grab the first word, ".1.3.6.1.2.1.43.11.1.1.6.1.3", using the first read-pipe
      # then it will put the OID components into the array $oid[] by changing the separator to a dot
      # then it will pick out the last element (${oid[-1]}), but only if the array is non-empty...
      local CONSUMABLE_ID=$($CMD_SNMPWALK -t 2 -r 2 -v 1 -On -c $COMMUNITY $HOSTNAME $OID_NAME | $CMD_GREP -i "${CONSUMABLE_NAME}" | { read first _; echo $first; } | { IFS="."; read all; oid=($all);  if [ "${#oid[@]}" -gt 0 ]; then echo ${oid[-1]}; fi })
    fi
  done

  if [ "$VERBOSE" = true ]; then
    echo "ID of ${CONSUMABLE} consumable: ${CONSUMABLE_ID}"
  fi

  if [ -n "$CONSUMABLE_ID" ]; then

    # loop through OIDs for total and status for consumable
    local CONSUMABLE_TOTAL="-1"
    for i in ${!OID_TOTALS[@]}; do
      # skip if we have already found a positive total
      if [ ${CONSUMABLE_TOTAL: 0:1} = "-" ]; then
        local OID_TOTAL=${OID_TOTALS[$i]}
        local OID_STATUS=${OID_STATUSES[$i]}

        local CONSUMABLE_TOTAL=`$CMD_SNMPGET -t 2 -r 2 -v 1 -c $COMMUNITY -Ovq  $HOSTNAME ${OID_TOTAL}.${CONSUMABLE_ID}`
        local CONSUMABLE_STATUS=`$CMD_SNMPGET -t 2 -r 2 -v 1 -c $COMMUNITY -Ovq $HOSTNAME ${OID_STATUS}.${CONSUMABLE_ID}`
      fi
    done

    if [ "$VERBOSE" = true ]; then
      echo "Consumable total value: ${CONSUMABLE_TOTAL}"
      echo "Consumable current value: ${CONSUMABLE_STATUS}"
    fi

    if [ -n "$CONSUMABLE_TOTAL" ] && [ -n "$CONSUMABLE_STATUS" ]; then

      
      let "CONSUMABLE_PERCENT = ( CONSUMABLE_STATUS * 100 ) / ( CONSUMABLE_TOTAL )"
      let "CONSUMABLE_USED_PERCENT = 100 - CONSUMABLE_PERCENT"

      if [ "$VERBOSE" = true ]; then
        echo "Consumable percent available: ${CONSUMABLE_PERCENT}"
        echo "Consumable percent used: ${CONSUMABLE_USED_PERCENT}"
      fi

      set_status "${CONSUMABLE_USED_PERCENT}"

      case "$CONSUMABLE" in
        black)
          CONSUMABLE_NAME="of the black cartridge"
        ;;
        cyan)
          CONSUMABLE_NAME="of the cyan cartridge"
        ;;
        magenta)
          CONSUMABLE_NAME="of the magenta cartridge"
        ;;
        yellow)
          CONSUMABLE_NAME="of the yellow cartridge"
        ;;
        drum)
          CONSUMABLE_NAME="of the printing device"
        ;;
        *)
          CONSUMABLE_NAME="of the consumable"
      esac

      DESCRIPTION="Utilisation $CONSUMABLE_NAME : ${CONSUMABLE_USED_PERCENT}% | cons_used=${CONSUMABLE_USED_PERCENT};$WARNING;$CRITICAL;0"
    else
      DESCRIPTION="Printer is waiting"
    fi
  fi
}


# Check page number of the printer (Usage : ./check_snmp_printer -H 127.0.0.1 -C public -t page)
# NOTE: This function will update the global DESCRIPTION and STATE variables!
check_pages() {
  PAGES=$($CMD_SNMPGET -t 2 -r 2 -v 1 -c $COMMUNITY -Ovq $HOSTNAME $OID_PAGE)
  if [ -n "$PAGES" ]; then
    DESCRIPTION="Page number : $PAGES | pages=$PAGES;${WARNING};${CRITICAL};0"
    set_status "${PAGES}"
  fi
}

# Check parameters
parse_parameters $*

# Check for type of resource
if [ $TYPE = "consumable" ] || [ $TYPE = "consummable" ]; then
  # Note: Older versions of the script misspelled "consumable" as "consummable", so we allow for both spellings here to preserve compatibility

  check_consumable

elif [ $TYPE = "page" ]; then

  check_pages

fi

echo $DESCRIPTION
exit $STATE
